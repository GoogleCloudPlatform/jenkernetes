/*
 * Copyright 2014 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

package org.jenkinsci.plugins.kubernetesworkflowsteps;

import groovy.json.JsonBuilder;
import groovy.json.JsonSlurper;

import org.apache.http.HttpHost;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.jenkinsci.plugins.workflow.steps.AbstractSynchronousStepExecution;

import hudson.EnvVars;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Map;

import javax.inject.Inject;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
public abstract class KubeStepExecution<S extends KubeStep> extends AbstractSynchronousStepExecution<Object>{
  
  /**
	 * 
	 */
	private static final long serialVersionUID = -5260746262819154146L;
@Inject protected transient S step;
  protected final Map<String,String> env = EnvVars.masterEnvVars; 
  protected final String readOnlyHost = env.get("KUBERNETES_RO_SERVICE_HOST");
  protected final String readWriteHost = env.get("KUBERNETES_SERVICE_HOST");
  protected final int readOnlyPort = Integer.valueOf(env.get("KUBERNETES_RO_SERVICE_PORT"));
  protected final int readWritePort = Integer.valueOf(env.get("KUBERNETES_SERVICE_PORT"));
  protected final String prefix = "/api/v1beta1/";
  
  
  protected <T extends HttpRequestBase> CloseableHttpResponse makeCall(T request, String host, int port) throws ClientProtocolException, IOException{
    CloseableHttpClient httpclient = HttpClients.createDefault();
    CloseableHttpResponse httpresponse = httpclient.execute(new HttpHost(host,port), request);
    try{
      return httpresponse;
    } finally {
      httpresponse.close();
      httpclient.close();
    }
  }
  
  protected Object parse(CloseableHttpResponse resp) throws IOException{
    return (new JsonSlurper()).parse((new InputStreamReader(resp.getEntity().getContent())));

  }
  
  protected StringEntity toEntity(Object payload) throws UnsupportedEncodingException{
    StringEntity entity = new StringEntity(new JsonBuilder(payload).toString());
    entity.setContentType("application/json");
    return entity;
  }
}