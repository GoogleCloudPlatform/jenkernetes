package org.jenkinsci.plugins.kubernetesworkflowsteps;

import org.apache.http.HttpHost;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.jenkinsci.plugins.workflow.steps.AbstractSynchronousStepExecution;

import hudson.EnvVars;

import java.io.IOException;
import java.util.Map;

import javax.inject.Inject;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
public abstract class KubeStepExecution<S extends KubeStep> extends AbstractSynchronousStepExecution<String>{
  
  @Inject protected transient S step;
  protected final Map<String,String> env = EnvVars.masterEnvVars; 
  protected final String readOnlyHost = env.get("KUBERNETES_RO_SERVICE_HOST");
  protected final String readWriteHost = env.get("KUBERNETES_SERVICE_HOST");
  protected final int readOnlyPort = Integer.valueOf(env.get("KUBERNETES_RO_SERVICE_PORT"));
  protected final int readWritePort = Integer.valueOf(env.get("KUBERNETES_SERVICE_PORT"));
  protected final String prefix = "/api/v1beta1/";
  
  
  protected <T extends HttpRequestBase> CloseableHttpResponse makeCall(T request, String host, int port) throws ClientProtocolException, IOException{
    CloseableHttpClient httpclient = HttpClients.createDefault();
    CloseableHttpResponse httpresponse = httpclient.execute(new HttpHost(host,port), request);
    try{
      return httpresponse;
    } finally {
      httpresponse.close();
      httpclient.close();
    }
  }
  
  protected String parse(CloseableHttpResponse resp) throws IOException{
    try{
      return EntityUtils.toString(resp.getEntity());
    } finally {
      resp.close();
    }
  }
}