package org.jenkinsci.plugins.kubernetesworkflowsteps;

import org.apache.http.client.methods.HttpPut;
import org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;
import org.kohsuke.stapler.DataBoundConstructor;

import hudson.Extension;
/**
 * TODO: Insert description here. (generated by elibixby)
 */
public class KubeUpdateStep extends KubeStep {

  public final transient Object payload;
  public final transient String id;
  /**
   * @param resource
   */
  @DataBoundConstructor
  public KubeUpdateStep(String resource, String id, Object payload) {
    super(resource);
    this.payload = payload;
    this.id = id;
  }
  
  @Extension public static final class DescriptorImpl extends AbstractStepDescriptorImpl{

    public DescriptorImpl() {
      super(Execution.class);
    }
    
    @Override
    public String getFunctionName(){
      return "kube_update";
    }
    
    @Override
    public String getDisplayName(){
      return "Update a resource using the Kubernetes API";
    }
    
  }
  

  
  public static class Execution extends KubeStepExecution<KubeUpdateStep>{
    
    /* (non-Javadoc)
     * @see org.jenkinsci.plugins.kubernetesworkflowsteps.KubeStepExecution#request()
     */
    @Override
    protected Object run() throws Exception {
      HttpPut put = new HttpPut(this.prefix+step.resource+"/"+step.id);
      put.setEntity(toEntity(step.payload));
      return parse(makeCall(put, this.readWriteHost, this.readWritePort));
    }
    
  }



}
