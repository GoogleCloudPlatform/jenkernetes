package org.jenkinsci.plugins.kubernetesworkflowsteps;

import com.github.kubernetes.java.client.model.ReplicationController;

import org.apache.commons.lang3.tuple.Pair;
import org.jenkinsci.plugins.workflow.steps.AbstractStepDescriptorImpl;
import org.kohsuke.stapler.DataBoundConstructor;

import hudson.Extension;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
public class UpdateReplicationController extends KubeStep<Pair<String, Object>, ReplicationController> {

  /**
   * @param obj
   */
  @DataBoundConstructor
  public UpdateReplicationController(Pair<String, Object> obj) {
    super(obj);
    // TODO(elibixby): Auto-generated constructor stub
  }

  public static class Execution extends KubeStepExecution<Pair<String, Object>, ReplicationController, UpdateReplicationController>{

    /* (non-Javadoc)
     * @see org.jenkinsci.plugins.workflow.steps.AbstractSynchronousStepExecution#run()
     */
    @Override
    protected ReplicationController run() throws Exception {
      if(step.arg.getValue() instanceof Integer){
        return this.getKubeClient().updateReplicationController(step.arg.getKey(),(Integer)step.arg.getValue());
      } else if (step.arg.getValue() instanceof ReplicationController){
        return this.getKubeClient().updateReplicationController(step.arg.getKey(),(ReplicationController)step.arg.getValue());
      } else {
        throw new Exception("Invalid argument should either be of type ReplicationController or Integer");
      }
    }
    
  }
  
  @Extension
  public static class DescriptorImpl extends AbstractStepDescriptorImpl{
    public DescriptorImpl() {
      super(Execution.class);
    }

    @Override public String getFunctionName() {
      return "kube_update_replication_controller";
    }

    @Override public String getDisplayName() {
      return "Update a ReplicationController with a new number of replicas to maintain";
    }
  }
}
